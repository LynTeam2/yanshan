group 'com.xingkong.lyn'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
// tag::build[]
        classpath('se.transmode.gradle:gradle-docker:1.2')
// end::build[]
    }
}

apply plugin: 'java'
// apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'spring-boot'
// tag::plugin[]
apply plugin: 'docker'
// end::plugin[]
//apply plugin: 'org.springframework.boot'
//apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'anjian'
    version =  '1.0.0'
    manifest {
        attributes "Main-Class": "com.xingkong.lyn.StartApp"
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// tag::task[]
task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}
// end::task[]

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    jcenter()
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile 'jstl:jstl:1.2'
    compile 'mysql:mysql-connector-java:5.1.38'
    compile 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    compile 'org.mybatis:mybatis:3.3.0'
    compile 'junit:junit:4.12'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.0.0'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'com.alibaba:druid:1.0.25'
    compile 'org.springframework.boot:spring-boot-starter-aop'
//    compile 'org.apache.logging.log4j:log4j-api:2.6.2'
//    compile 'org.apache.logging.log4j:log4j-core:2.6.2'
//    compile 'org.apache.logging.log4j:log4j-web:2.6.2'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.apache.shiro:shiro-spring:1.3.2'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'org.thymeleaf:thymeleaf:3.0.2.RELEASE'
    compile 'org.thymeleaf:thymeleaf-spring4:3.0.2.RELEASE'
    compile 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.1.1'
    compile 'org.crazycake:shiro-redis:2.4.2.1-RELEASE'
//    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.5.4'
    compile 'com.alibaba:fastjson:1.2.15'
//    compile 'org.springframework.boot:spring-boot-starter-jersey'

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/config/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/config/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}